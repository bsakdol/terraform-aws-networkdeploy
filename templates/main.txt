# ------------------------------------------------------------------------------
# Automatically generated file
# ------------------------------------------------------------------------------
# Any manual changes to this file will be overwritten the next time it is
# generated by running `./setup.py`

# ------------------------------------------------------------------------------
# Get account information for the default provider in the main region
# ------------------------------------------------------------------------------
data "aws_caller_identity" "this" {
  provider = aws.oregon
}

# ------------------------------------------------------------------------------
# Generate default tags for all resources
# ------------------------------------------------------------------------------
locals {
  default_tags = merge(
    var.tags,
    { Terraform = "true" }
  )
}

# ------------------------------------------------------------------------------
# AWS | Network Manager | --> Create global network
# ------------------------------------------------------------------------------
resource "aws_networkmanager_global_network" "this" {
  count    = var.deploy_network_manager ? 1 : 0
  provider = aws.oregon

  description = "Network Manager"

  tags = merge(
    local.default_tags,
    { Name = "turnitin_aws_global_network" }
  )
}

# ------------------------------------------------------------------------------
# AWS | Transit Gateway | --> Deploy Transit Gateways
# ------------------------------------------------------------------------------
{% for transit_gateway in TRANSIT_GATEWAYS %}
# REGION: {{ transit_gateway.description.upper() }} ({{ transit_gateway.region.upper() }})
# ------------------------------------------------------------------------------
module "tgw_deployment_{{ transit_gateway.description }}" {
  source    = "./modules/transit_gateway"
  count     = var.deploy_in_region.all_regions || var.deploy_in_region.{{ transit_gateway.description }} ? 1 : 0
  providers = { aws = aws.{{ transit_gateway.description }} }

  amazon_side_asn                 = var.transit_gateway_bgp_asn.{{ transit_gateway.description }}
  auto_accept_shared_attachments  = true
  default_route_table_association = false
  default_route_table_propagation = false
  dns_support                     = true
  multicast_support               = false
  vpn_ecmp_support                = true

  tags = merge(
    local.default_tags,
    { Name = "{{ transit_gateway.description }}" }
  )
}

# Register the Transit Gateway with Global Network Manager
resource "aws_networkmanager_transit_gateway_registration" "tgw_deployment_{{ transit_gateway.description }}" {
  count    = var.deploy_in_region.all_regions || var.deploy_in_region.{{ transit_gateway.description }} ? 1 : 0
  provider = aws.{{ transit_gateway.description }}

  global_network_id   = aws_networkmanager_global_network.this[0].id
  transit_gateway_arn = module.tgw_deployment_{{ transit_gateway.description }}[0].arn
}
{% endfor %}
# ------------------------------------------------------------------------------
# AWS | Transit Gateway | --> Peer Transit Gateways
# ------------------------------------------------------------------------------
{% for peering_connection in TRANSIT_GATEWAY_PEERS %}
# REQUESTER REGION: {{ peering_connection.region.upper() }} ({{ peering_connection.region_code.upper() }})
# ACCEPTER REGION: {{ peering_connection.peer_region.upper() }} ({{ peering_connection.peer_region_code.upper() }})
# ------------------------------------------------------------------------------
module "tgw_peering_regions_{{ peering_connection.peering_name }}" {
  source    = "./modules/transit_gateway_peering"
  count     = (var.deploy_in_region.all_regions || (var.deploy_in_region.{{ peering_connection.region }} && var.deploy_in_region.{{ peering_connection.peer_region }})) && (var.transit_gateway_peering.full_mesh || var.transit_gateway_peering.{{ peering_connection.peering_name }}) ? 1 : 0
  providers = { aws = aws.{{ peering_connection.region }} }

  name = "{{ peering_connection.peering_name }}"

  peer_account_id         = data.aws_caller_identity.this.account_id
  peer_region             = "{{ peering_connection.peer_region_code }}"
  peer_transit_gateway_id = module.tgw_deployment_{{ peering_connection.peer_region }}[0].id
  transit_gateway_id      = module.tgw_deployment_{{ peering_connection.region }}[0].id

  tags = local.default_tags
}

resource "aws_ec2_transit_gateway_peering_attachment_accepter" "tgw_peering_regions_{{ peering_connection.peering_name }}_accepter" {
  count    = (var.deploy_in_region.all_regions || (var.deploy_in_region.{{ peering_connection.region }} && var.deploy_in_region.{{ peering_connection.peer_region }})) && (var.transit_gateway_peering.full_mesh || var.transit_gateway_peering.{{ peering_connection.peering_name }}) ? 1 : 0
  provider = aws.{{ peering_connection.peer_region }}

  transit_gateway_attachment_id = module.tgw_peering_regions_{{ peering_connection.peering_name }}[0].id

  tags = { Name = "{{ peering_connection.peer_region }}_to_{{ peering_connection.region }}" }
}
{% endfor %}
